// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.RobotContainer;
import frc.robot.subsystems.driveSubsystem;

public class gyroStraightDrive extends CommandBase {

    private final driveSubsystem m_driveSubsystem;
 
    double baseSpeed;
	double maxSpeed;
	double distance;


    public gyroStraightDrive(driveSubsystem subsystem, double distance) {

        m_driveSubsystem = subsystem;
        addRequirements(m_driveSubsystem);

        this.distance = distance;
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        driveSubsystem.resetEncoder();
    	
    	baseSpeed = Preferences.getDouble("StraightGyro-BaseSpeed", 0.1);
    	maxSpeed = Preferences.getDouble("StraightGyro-MaxSpeed", 0.1);

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        Double heading = driveSubsystem.readHeading();
        SmartDashboard.putNumber("Gyro Angle", heading);
    	
    	if (baseSpeed <= maxSpeed){
    		baseSpeed += 0.005;
    	}
    	
    	if (distance - 10 <= driveSubsystem.getPosition() && baseSpeed >= 0.55){
    		baseSpeed = (baseSpeed - 0.02);
    	}
    	
    	Double left = (baseSpeed + (0.025 * heading));
    	Double right = (baseSpeed - (0.025 * heading));
    	
    	
    	SmartDashboard.putNumber("GSD Current Speed", baseSpeed);

    	//driveSubsystem.driveTrain.tankDrive(-left, -right);
        driveSubsystem.frontLeft.set(-left);
        driveSubsystem.backLeft.set(-left);

        driveSubsystem.frontRight.set(-right);
        driveSubsystem.backRight.set(-right);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        driveSubsystem.driveTrain.driveCartesian(0, 0, 0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return driveSubsystem.getPosition() < distance;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;

    }
}
